***************************************************************************************
  * @函数描述：  MPU6050初始化
  * @入口参数：  无.
  * @返回值  :   初始化完成标志，0----完成，!0----未完成.
****************************************************************************************/

/***************************************************************************************
  * @函数描述：  陀螺仪零点校准
  * @入口参数：  无.
  * @返回值  :   无.
****************************************************************************************/
int32_t  first_x=0, first_y=0,first_z=0;
void First_Gyro_OFFEST(void)
{
	mpu_get_data();
	first_x = ((((int16_t)mpu_buff[8]) << 8) | mpu_buff[9]);
	first_y = ((((int16_t)mpu_buff[10]) << 8)| mpu_buff[11]);
	first_z = ((((int16_t)mpu_buff[12]) << 8)| mpu_buff[13]);	 
}

int32_t  Sum_x=0,Sum_y=0,Sum_z=0;	
void Gyro_OFFEST(void)
{

   int cnt_g=1000;
	 int cnt = cnt_g;
	 float  tempgx=0,tempgy=0,tempgz=0;
	
	 sensor.gyro.averag.x=0;    //零点偏移清零
	 sensor.gyro.averag.y=0;  
	 sensor.gyro.averag.z=0;
	 First_Gyro_OFFEST();
		  
	 while(cnt_g--)       //循环采集1000次   求平均
	 {
      delay_ms(1);
		 	mpu_get_data();
		 
		  sensor.gyro.origin.x = ((((int16_t)mpu_buff[8]) << 8) | mpu_buff[9]);
	    sensor.gyro.origin.y = ((((int16_t)mpu_buff[10]) << 8)| mpu_buff[11]);
	    sensor.gyro.origin.z = ((((int16_t)mpu_buff[12]) << 8)| mpu_buff[13]);
		 
      tempgx+= sensor.gyro.origin.x;
			tempgy+= sensor.gyro.origin.y;
			tempgz+= sensor.gyro.origin.z;
		 		 		
		  Sum_x+=(sensor.gyro.origin.x-first_x);
		  Sum_y+=(sensor.gyro.origin.y-first_y);
		  Sum_z+=(sensor.gyro.origin.z-first_z);
		 
		 if(cnt_g==0)
		 {
	      cnt_g=1000;
				cnt = 1000;
				tempgx=0;
				tempgy=0;
				tempgz=0;
				Sum_x=0;Sum_y=0;Sum_z=0;
			  sensor.gyro.averag.x=0;    //零点偏移清零
        sensor.gyro.averag.y=0;  
		  	sensor.gyro.averag.z=0;
			  First_Gyro_OFFEST();
	  	}
		 } 
 }
	 sensor.gyro.quiet.x=tempgx/cnt;
	 sensor.gyro.quiet.y=tempgy/cnt;
	 sensor.gyro.quiet.z=tempgz/cnt;
	 
}


 /********************************************
函数名：void PrepareForIMU(uint8_t flag)
功能：读取陀螺仪数据
输入：使能
返回：无
注意：
*********************************************/
void PrepareForIMU(uint8_t flag)
{
float sumx,sumy,sumz;//sum_yaw		
static uint8_t gyro_filter_cnt = 0;
int i =0;
	
	if(flag == 0) 
	    return;
	else
	{
		mpu_get_data();

		sensor.acc.origin.x = ((((int16_t)mpu_buff[0]) << 8) | mpu_buff[1]) ;
		sensor.acc.origin.y = ((((int16_t)mpu_buff[2]) << 8) | mpu_buff[3]) ;
		sensor.acc.origin.z = ((((int16_t)mpu_buff[4]) << 8) | mpu_buff[5]);
		
		sensor.gyro.origin.x = ((((int16_t)mpu_buff[8]) << 8) | mpu_buff[9])-  sensor.gyro.quiet.x;
		sensor.gyro.origin.y = ((((int16_t)mpu_buff[10]) << 8)| mpu_buff[11])- sensor.gyro.quiet.y;
		sensor.gyro.origin.z = ((((int16_t)mpu_buff[12]) << 8)| mpu_buff[13])- sensor.gyro.quiet.z;
		
		Gyro_File_Buf[0][gyro_filter_cnt] = sensor.gyro.origin.x ;
		Gyro_File_Buf[1][gyro_filter_cnt] = sensor.gyro.origin.y ;
		Gyro_File_Buf[2][gyro_filter_cnt] = sensor.gyro.origin.z ;
			
		  sumx = 0;
		  sumy = 0;
		  sumz = 0;
		for(i=0;i<GYRO_FILTER_NUM;i++)
		{
			sumx += Gyro_File_Buf[0][i];
			sumy += Gyro_File_Buf[1][i];
			sumz += Gyro_File_Buf[2][i];
		}

		
		gyro_filter_cnt = ( gyro_filter_cnt + 1 ) % GYRO_FILTER_NUM;
		
		sensor.gyro.radian.x  = sumx / (float)GYRO_FILTER_NUM * Gyro_Gr;
		sensor.gyro.radian.y  = sumy / (float)GYRO_FILTER_NUM * Gyro_Gr;
		sensor.gyro.radian.z  = sumz / (float)GYRO_FILTER_NUM * Gyro_Gr;
				
		sensor.acc.averag.x = KalmanFilter_x(sensor.acc.origin.x,IMU_KALMAN_Q,IMU_KALMAN_R);  // ACC X轴卡尔曼滤波
		sensor.acc.averag.y = KalmanFilter_y(sensor.acc.origin.y,IMU_KALMAN_Q,IMU_KALMAN_R);  // ACC Y轴卡尔曼滤波
		sensor.acc.averag.z = KalmanFilter_z(sensor.acc.origin.z,IMU_KALMAN_Q,IMU_KALMAN_R);  // ACC Z轴卡尔曼滤波
		
	}
}


void Get_Onboard_Imu_Info(void)
{	
	Pitch_Angle_speed=-sensor.gyro.radian.x/Gyro_Gr;//角度微分得到加速度
	Yaw_Angle_speed=-sensor.gyro.radian.z / Gyro_Gr;
	if(abs( Yaw_Angle_speed ) < GYRO_GAP)           //滤波
	{
		Yaw_Angle_speed = 0;
	}
	if(Clock_count<mpu_wait_time)
		Yaw_6050_Angle=0;
	else
		Yaw_6050_Angle- = Yaw_Angle_speed * K_ANGLESPEED_2_ANGLE;
	
	Pitch_6050_Angle =angle.roll;  //获得pitch角度
}

