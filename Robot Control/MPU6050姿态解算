***************************************************************************************
  * @函数描述：  MPU6050初始化
  * @入口参数：  无.
  * @返回值  :   初始化完成标志，0----完成，!0----未完成.
****************************************************************************************/

/***************************************************************************************
  * @函数描述：  陀螺仪零点校准
  * @入口参数：  无.
  * @返回值  :   无.
****************************************************************************************/
int32_t  first_x=0, first_y=0,first_z=0;
void First_Gyro_OFFEST(void)
{
	mpu_get_data();
	first_x = ((((int16_t)mpu_buff[8]) << 8) | mpu_buff[9]);
	first_y = ((((int16_t)mpu_buff[10]) << 8)| mpu_buff[11]);
	first_z = ((((int16_t)mpu_buff[12]) << 8)| mpu_buff[13]);	 
}

int32_t  Sum_x=0,Sum_y=0,Sum_z=0;	
void Gyro_OFFEST(void)
{

   int cnt_g=1000;
	 int cnt = cnt_g;
	 float  tempgx=0,tempgy=0,tempgz=0;
	
	 sensor.gyro.averag.x=0;    //零点偏移清零
	 sensor.gyro.averag.y=0;  
	 sensor.gyro.averag.z=0;
	 First_Gyro_OFFEST();
		  
	 while(cnt_g--)       //循环采集1000次   求平均
	 {
      delay_ms(1);
		 	mpu_get_data();
		 
		  sensor.gyro.origin.x = ((((int16_t)mpu_buff[8]) << 8) | mpu_buff[9]);
	    sensor.gyro.origin.y = ((((int16_t)mpu_buff[10]) << 8)| mpu_buff[11]);
	    sensor.gyro.origin.z = ((((int16_t)mpu_buff[12]) << 8)| mpu_buff[13]);
		 
      tempgx+= sensor.gyro.origin.x;
			tempgy+= sensor.gyro.origin.y;
			tempgz+= sensor.gyro.origin.z;
		 		 		
		  Sum_x+=(sensor.gyro.origin.x-first_x);
		  Sum_y+=(sensor.gyro.origin.y-first_y);
		  Sum_z+=(sensor.gyro.origin.z-first_z);
		 
		 if(cnt_g==0)
		 {
	      cnt_g=1000;
				cnt = 1000;
				tempgx=0;
				tempgy=0;
				tempgz=0;
				Sum_x=0;Sum_y=0;Sum_z=0;
			  sensor.gyro.averag.x=0;    //零点偏移清零
        sensor.gyro.averag.y=0;  
		  	sensor.gyro.averag.z=0;
			  First_Gyro_OFFEST();
	  	}
		 } 
 }
	 sensor.gyro.quiet.x=tempgx/cnt;
	 sensor.gyro.quiet.y=tempgy/cnt;
	 sensor.gyro.quiet.z=tempgz/cnt;
	 
}



***************************************************************************************
  * @函数描述：  四元数解算
  * @入口参数：  无.
  * @输出值  :   yaw轴角度，pitch轴角度，roll轴角度   
****************************************************************************************/
void IMUupdate(float gx, float gy, float gz, float ax, float ay, float az)
{
    float norm;
    float vx, vy, vz;
    float ex, ey, ez,halfT;
    float tempq0,tempq1,tempq2,tempq3;

    float q0q0 = q0*q0;
    float q0q1 = q0*q1;
    float q0q2 = q0*q2;
    float q0q3 = q0*q3;
    float q1q1 = q1*q1;
    float q1q2 = q1*q2;
    float q1q3 = q1*q3;
    float q2q2 = q2*q2;   
    float q2q3 = q2*q3;
    float q3q3 = q3*q3;   

		
	  now = Get_Time_Micros();  //读取时间 单位是us   
    if(now<lastUpdate)
    {
      halfT =  ((float)(now + (0xffffffff- lastUpdate)) / 2000000.0f);   //  uint 0.5s
    }
    else	
    {
       halfT =  ((float)(now - lastUpdate) / 2000000.0f);
    }
    lastUpdate = now;	//更新时间

    //快速求平方根算法
    norm = invSqrt(ax*ax + ay*ay + az*az);       
    ax = ax * norm;
    ay = ay * norm;
    az = az * norm;

    // estimated direction of gravity and flux (v and w)
    vx = 2.0f*(q1q3 - q0q2);
    vy = 2.0f*(q0q1 + q2q3);
    vz = q0q0 - q1q1 - q2q2 + q3q3;

    ex = (ay*vz - az*vy);
    ey = (az*vx - ax*vz);
    ez = (ax*vy - ay*vx);

    if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
    {
			exInt = exInt + ex * Kii * halfT;
			eyInt = eyInt + ey * Kii * halfT;	
			ezInt = ezInt + ez * Kii * halfT;
			// 用叉积误差来做PI修正陀螺零偏
			gx = gx + Kp*ex + exInt;
			gy = gy + Kp*ey + eyInt;
			gz = gz + Kp*ez + ezInt;
    }
    // 四元数微分方程
    tempq0 = q0 + (-q1*gx - q2*gy - q3*gz)*halfT;
    tempq1 = q1 + (q0*gx + q2*gz - q3*gy)*halfT;
    tempq2 = q2 + (q0*gy - q1*gz + q3*gx)*halfT;
    tempq3 = q3 + (q0*gz + q1*gy - q2*gx)*halfT;  

    // 四元数规范化
    norm = invSqrt(tempq0*tempq0 + tempq1*tempq1 + tempq2*tempq2 + tempq3*tempq3);
    q0 = tempq0 * norm;
    q1 = tempq1 * norm;
    q2 = tempq2 * norm;
    q3 = tempq3 * norm;
		
		angle.yaw= -atan2(2 * q1 * q2 + 2 * q0* q3, -2 * q2*q2 - 2 * q3 * q3 + 1)*RtA; // yaw        -pi----pi
    angle.pitch= -asin(-2 * q1 * q3 + 2 * q0 * q2)*RtA; // pitch    -pi/2    --- pi/2 
    angle.roll= atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* RtA; // roll       -pi-----pi 
	}	




